digraph "variant_filter_iterator&lt; Predicate, Type, ReferenceType, PointerType, ConstType, ConstReferenceType, ConstPointerType &gt;::Iter&lt; IterType &gt;"
{
 // INTERACTIVE_SVG=YES
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="variant_filter_iterator\l\< Predicate, Type, Reference\lType, PointerType, ConstType,\l ConstReferenceType, ConstPointerType\l \>::Iter\< IterType \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="variant_filter_iterator\l\< Predicate, Type, Reference\lType, PointerType, ConstType,\l ConstReferenceType, ConstPointerType\l \>::IterBase",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structvariant__filter__iterator_1_1IterBase.html",tooltip="Abstract base class for the iterator type. "];
}
